// ** T2Tokens Class ** //
// Autogenerated in main_create_cmds.cpp from cmds_format.json ** //
// Manzano Software //

#ifndef _MZN_CMD_T2_TOKENS_H
#define _MZN_CMD_T2_TOKENS_H

#include "command.h"


#include "t1_ignore.h"
#include "t1_version_number.h"
#include "t1_network_station.h"
#include "t1_dp_netserver.h"
#include "t1_data_subscription_server.h"
#include "t1_dp_webserver.h"
#include "t1_clock_processing.h"
#include "t1_log_and_timing.h"
#include "t1_configuration_identification.h"
#include "t1_data_server.h"
#include "t1_comm_event.h"
#include "t1_irr_filter.h"

#include "command_map_nb.h"
namespace mzn {

// -------------------------------------------------------------------------- //
class T2Tokens : public CommandMapNb {

friend std::ostream & operator<<(std::ostream & cmd_os, T2Tokens const & cmd);

public:

    // ---------------------------------------------------------------------- //

    enum class Keys {
        t1_ignore = 0,
        t1_version_number = 1,
        t1_network_station = 2,
        t1_dp_netserver = 3,
        t1_data_subscription_server = 4,
        t1_dp_webserver = 5,
        t1_clock_processing = 6,
        t1_log_and_timing = 7,
        t1_configuration_identification = 8,
        t1_data_server = 9,
        t1_comm_event = 192,
        t1_irr_filter = 129,
    };

    std::vector<uint8_t> const all_keys = {
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 192, 129,
    };

    std::vector<uint8_t> const keys() const override {return all_keys;}

    explicit T2Tokens();
    ~T2Tokens() = default;

    T2Tokens(T2Tokens && rhs) = default;
    T2Tokens & operator=(T2Tokens && rhs) = default;
    std::string const cmd_name = "t2_tokens";


    uint16_t msg_to_data(std::vector<uint8_t> const & msg,
                         uint16_t mf_begin) override;

    uint16_t data_to_msg(std::vector<uint8_t> & msg,
                         uint16_t mf_begin) const override;
    // max keys implementation in a separate function/file
    // not part of auto generation
    uint16_t nb(std::vector<uint8_t> const & msg,
                uint16_t mf_begin) const override;
    void create_new_ic(uint8_t const  cmd_key) override;

private:

    std::ostream & os_print(std::ostream & cmd_os) const override;
};


inline std::ostream & operator<<(std::ostream & cmd_os, T2Tokens const & cmd) {
    return cmd.os_print(cmd_os);
}

} // end namespace
#endif // _MZN_CMD_T2_TOKENS_H
