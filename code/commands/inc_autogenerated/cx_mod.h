// ** CxMod Class ** //
// Autogenerated in main_create_cmds.cpp from cmds_format.json ** //
// Manzano Software //

#ifndef _MZN_CMD_CX_MOD_H
#define _MZN_CMD_CX_MOD_H

#include "command.h"

namespace mzn {

// -------------------------------------------------------------------------- //
class CxMod : public Command {

friend std::ostream & operator<<(std::ostream & cmd_os, CxMod const & cmd);

public:

    explicit CxMod();
    ~CxMod() = default;

    CxMod(CxMod && rhs) = default;
    CxMod & operator=(CxMod && rhs) = default;
    CxMod(CxMod const & rhs) = default;
    CxMod & operator=(CxMod const & rhs) = default;
    std::string const cmd_name = "cx_mod";

    CmdFieldPstring<12> module_name;
    CmdField<uint16_t> revision;
    CmdFieldHex<uint16_t> overlay_number;
    CmdFieldArrayUByte<4> module_crc;

    uint16_t msg_to_data(std::vector<uint8_t> const & msg,
                         uint16_t mf_begin) override;

    uint16_t data_to_msg(std::vector<uint8_t> & msg,
                         uint16_t mf_begin) const override;

private:

    std::ostream & os_print(std::ostream & cmd_os) const override;
};


inline std::ostream & operator<<(std::ostream & cmd_os, CxMod const & cmd) {
    return cmd.os_print(cmd_os);
}

} // end namespace
#endif // _MZN_CMD_CX_MOD_H
