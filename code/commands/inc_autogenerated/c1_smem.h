// ** C1Smem Class ** //
// Autogenerated in main_create_cmds.cpp from cmds_format.json ** //
// Manzano Software //

#ifndef _MZN_CMD_C1_SMEM_H
#define _MZN_CMD_C1_SMEM_H

#include "command.h"

namespace mzn {

// -------------------------------------------------------------------------- //
class C1Smem : public Command {

friend std::ostream & operator<<(std::ostream & cmd_os, C1Smem const & cmd);

public:

    explicit C1Smem();
    ~C1Smem() = default;

    C1Smem(C1Smem && rhs) = default;
    C1Smem & operator=(C1Smem && rhs) = default;
    C1Smem(C1Smem const & rhs) = default;
    C1Smem & operator=(C1Smem const & rhs) = default;
    std::string const cmd_name = "c1_smem";

    CmdFieldHex<uint32_t> starting_address;
    CmdField<uint16_t> byte_count;
    BmMemoryType memory_type;
    CmdField<uint16_t> segment_number;
    CmdField<uint16_t> total_number_of_segments;
    CmdFieldVector<0> memory_contents;

    uint16_t msg_to_data(std::vector<uint8_t> const & msg,
                         uint16_t mf_begin) override;

    uint16_t data_to_msg(std::vector<uint8_t> & msg,
                         uint16_t mf_begin) const override;

private:

    std::ostream & os_print(std::ostream & cmd_os) const override;
};


inline std::ostream & operator<<(std::ostream & cmd_os, C1Smem const & cmd) {
    return cmd.os_print(cmd_os);
}

} // end namespace
#endif // _MZN_CMD_C1_SMEM_H
