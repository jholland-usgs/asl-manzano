// ** T1IrrFilter Class ** //
// Autogenerated in main_create_cmds.cpp from cmds_format.json ** //
// Manzano Software //

#ifndef _MZN_CMD_T1_IRR_FILTER_H
#define _MZN_CMD_T1_IRR_FILTER_H

#include "command.h"


#include "tx_irr_filter.h"

namespace mzn {

// -------------------------------------------------------------------------- //


enum class T1IrrFilterKey {
    tx_irr_filter = 0,
};
} // <- mzn
#include "command_vector_ni.h"
namespace mzn {

// -------------------------------------------------------------------------- //
class T1IrrFilter : public CommandVectorNi {

friend std::ostream & operator<<(std::ostream & cmd_os, T1IrrFilter const & cmd);

public:

    explicit T1IrrFilter();
    ~T1IrrFilter() = default;

    T1IrrFilter(T1IrrFilter && rhs) = default;
    T1IrrFilter & operator=(T1IrrFilter && rhs) = default;
    std::string const cmd_name = "t1_irr_filter";

    CmdField<uint8_t> number_of_bytes;
    CmdField<uint8_t> filter_number;
    CmdFieldPstring<0> filter_name;
    CmdField<uint8_t> number_of_sections;
    CmdField<float> gain;
    CmdField<float> reference_frequency;

    uint16_t msg_to_data(std::vector<uint8_t> const & msg,
                         uint16_t mf_begin) override;

    uint16_t data_to_msg(std::vector<uint8_t> & msg,
                         uint16_t mf_begin) const override;
    // max keys implementation in a separate function/file
    // not part of auto generation
    uint16_t ni(std::vector<uint8_t> const & msg,
                uint16_t mf_begin) const override;
    void create_new_ic(uint8_t const  cmd_key) override;

private:

    std::ostream & os_print(std::ostream & cmd_os) const override;
};


inline std::ostream & operator<<(std::ostream & cmd_os, T1IrrFilter const & cmd) {
    return cmd.os_print(cmd_os);
}

} // end namespace
#endif // _MZN_CMD_T1_IRR_FILTER_H
