// ** C1Sc Class ** //
// Autogenerated in main_create_cmds.cpp from cmds_format.json ** //
// Manzano Software //

#ifndef _MZN_CMD_C1_SC_H
#define _MZN_CMD_C1_SC_H

#include "command.h"

namespace mzn {

// -------------------------------------------------------------------------- //
class C1Sc : public Command {

friend std::ostream & operator<<(std::ostream & cmd_os, C1Sc const & cmd);

public:

    explicit C1Sc();
    ~C1Sc() = default;

    C1Sc(C1Sc && rhs) = default;
    C1Sc & operator=(C1Sc && rhs) = default;
    C1Sc(C1Sc const & rhs) = default;
    C1Sc & operator=(C1Sc const & rhs) = default;
    std::string const cmd_name = "c1_sc";

    CmdFieldIgnore<uint16_t> sensor_output_1a_ignore;
    CmdField<bool, 1> sensor_output_1a_active_high;
    BmSensorControlOutput sensor_output_1a;
    CmdFieldIgnore<uint16_t> sensor_output_2a_ignore;
    CmdField<bool, 1> sensor_output_2a_active_high;
    BmSensorControlOutput sensor_output_2a;
    CmdFieldIgnore<uint16_t> sensor_output_3a_ignore;
    CmdField<bool, 1> sensor_output_3a_active_high;
    BmSensorControlOutput sensor_output_3a;
    CmdFieldIgnore<uint16_t> sensor_output_4a_ignore;
    CmdField<bool, 1> sensor_output_4a_active_high;
    BmSensorControlOutput sensor_output_4a;
    CmdFieldIgnore<uint16_t> sensor_output_1b_ignore;
    CmdField<bool, 1> sensor_output_1b_active_high;
    BmSensorControlOutput sensor_output_1b;
    CmdFieldIgnore<uint16_t> sensor_output_2b_ignore;
    CmdField<bool, 1> sensor_output_2b_active_high;
    BmSensorControlOutput sensor_output_2b;
    CmdFieldIgnore<uint16_t> sensor_output_3b_ignore;
    CmdField<bool, 1> sensor_output_3b_active_high;
    BmSensorControlOutput sensor_output_3b;
    CmdFieldIgnore<uint16_t> sensor_output_4b_ignore;
    CmdField<bool, 1> sensor_output_4b_active_high;
    BmSensorControlOutput sensor_output_4b;

    uint16_t msg_to_data(std::vector<uint8_t> const & msg,
                         uint16_t mf_begin) override;

    uint16_t data_to_msg(std::vector<uint8_t> & msg,
                         uint16_t mf_begin) const override;

private:

    std::ostream & os_print(std::ostream & cmd_os) const override;
};


inline std::ostream & operator<<(std::ostream & cmd_os, C1Sc const & cmd) {
    return cmd.os_print(cmd_os);
}

} // end namespace
#endif // _MZN_CMD_C1_SC_H
