// ** T1LogicalChannelQueue Class ** //
// Autogenerated in main_create_cmds.cpp from cmds_format.json ** //
// Manzano Software //

#ifndef _MZN_CMD_T1_LOGICAL_CHANNEL_QUEUE_H
#define _MZN_CMD_T1_LOGICAL_CHANNEL_QUEUE_H

#include "command.h"


#include "tx_pre_event_buffers.h"
#include "tx_gap_threshold.h"
#include "tx_calibration_delay.h"
#include "tx_maximum_frame_count.h"
#include "tx_fir_multiplier.h"
#include "tx_averaging_parameters.h"
#include "tx_control_detector.h"
#include "tx_decimation_entry.h"
#include "tx_detector_1.h"
#include "tx_detector_2.h"
#include "tx_detector_3.h"
#include "tx_detector_4.h"
#include "tx_detector_5.h"
#include "tx_detector_6.h"
#include "tx_detector_7.h"
#include "tx_detector_8.h"

#include "command_map_ni.h"
namespace mzn {

// -------------------------------------------------------------------------- //
class T1LogicalChannelQueue : public CommandMapNi {

friend std::ostream & operator<<(std::ostream & cmd_os, T1LogicalChannelQueue const & cmd);

public:

    // ---------------------------------------------------------------------- //

    enum class Keys {
        tx_pre_event_buffers = 3,
        tx_gap_threshold = 4,
        tx_calibration_delay = 5,
        tx_maximum_frame_count = 6,
        tx_fir_multiplier = 7,
        tx_averaging_parameters = 8,
        tx_control_detector = 9,
        tx_decimation_entry = 10,
        tx_detector_1 = 12,
        tx_detector_2 = 13,
        tx_detector_3 = 14,
        tx_detector_4 = 15,
        tx_detector_5 = 16,
        tx_detector_6 = 17,
        tx_detector_7 = 18,
        tx_detector_8 = 19,
    };

    std::vector<uint8_t> const all_keys = {
        3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19,
    };

    std::vector<uint8_t> const keys() const override {return all_keys;}

    explicit T1LogicalChannelQueue();
    ~T1LogicalChannelQueue() = default;

    T1LogicalChannelQueue(T1LogicalChannelQueue && rhs) = default;
    T1LogicalChannelQueue & operator=(T1LogicalChannelQueue && rhs) = default;
    std::string const cmd_name = "t1_logical_channel_queue";

    CmdField<uint8_t> number_of_bytes;
    CmdFieldArrayChar<2> location_code;
    CmdFieldArrayChar<3> seed_name;
    CmdField<uint8_t> lcq_reference_number;
    CmdFieldHex<uint16_t> source;
    BmLogicalChannelOption option;
    CmdField<int16_t> rate;

    uint16_t msg_to_data(std::vector<uint8_t> const & msg,
                         uint16_t mf_begin) override;

    uint16_t data_to_msg(std::vector<uint8_t> & msg,
                         uint16_t mf_begin) const override;
    bool command_active(uint8_t const cmd_key) const override;
    void create_new_ic(uint8_t const  cmd_key) override;

private:

    std::ostream & os_print(std::ostream & cmd_os) const override;
};


inline std::ostream & operator<<(std::ostream & cmd_os, T1LogicalChannelQueue const & cmd) {
    return cmd.os_print(cmd_os);
}

} // end namespace
#endif // _MZN_CMD_T1_LOGICAL_CHANNEL_QUEUE_H
