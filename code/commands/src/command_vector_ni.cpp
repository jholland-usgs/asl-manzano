// ** CommandVectorNi Class ** //
// Manzano software

#include "command_vector_ni.h"
namespace mzn {

// -------------------------------------------------------------------------- //
CommandVectorNi::CommandVectorNi(uint16_t const cmd_number,
                             uint16_t const cmd_data_size) :
        CommandContainer(cmd_number, cmd_data_size) {}

// move constructor
// -------------------------------------------------------------------------- //
CommandVectorNi::CommandVectorNi(CommandVectorNi && rhs) noexcept :
        CommandContainer( std::move(rhs) ) {}

// -------------------------------------------------------------------------- //
uint16_t CommandVectorNi::msg_to_data(std::vector<uint8_t> const & msg,
                                      uint16_t mf_begin) {

    // in case this function gets called more than once
    inner_commands.clear();

    // ni, pure virtual function, typically not autogenerated
    auto const nic = ni(msg, mf_begin);

    for (int ck = 0; ck < nic; ck++) {
        // new inner command, pure virtual function
        create_new_ic(ck);
        // msg_to_data on inner commands
        mf_begin = inner_commands.back() -> msg_to_data(msg, mf_begin);
    }

    return mf_begin ;
}

} // << mzn
